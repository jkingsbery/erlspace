A rough outline of the design:
* C++ front end
* Erlang Backend
  * erlspace_networking: Handles Networking
  * erlspace_player: Game logic for player state
  * erlspace_world: Manages overall world state
  
Some design decisions:
* Seems like the networking should only handle the client's communication with the game server. There should be a different set of processes for handling the player state. (That way, all game objects communicate using messages.)
* Client needs a way to get updates pushed


Tasks:
* Client needs to handle response from server
* Client needs to scroll
* Two clients interacting with the server should see each other's ship